name: 'Run redis-py tests'
description: 'Runs redis-py tests against different Redis versions and configurations'
inputs:
  python-version:
    description: 'Python version to use for running tests'
    default: '3.12'
  parser-backend:
    description: 'Parser backend to use: plain or hiredis'
    required: true
  redis-version:
    description: 'Redis version to test against'
    required: true
  hiredis-version:
    description: 'hiredis version to test against'
    required: false
    default: '>3.0.0'
  event-loop:
    description: 'Event loop to use'
    required: false
    default: 'asyncio'
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}
        cache: 'pip'

    - name: Setup Test environment
      env:
        REDIS_VERSION: ${{ inputs.redis-version }}
        REDIS_IMAGE: "redis:${{ inputs.redis-version }}"
        CLIENT_LIBS_TEST_IMAGE: "redislabs/client-libs-test:${{ inputs.redis-version }}"
      run: |
        set -e
        
        echo "::group::Installing dependencies"
        pip install -U setuptools wheel
        pip install -r requirements.txt
        pip install -r dev_requirements.txt
        if [ "${{inputs.parser-backend}}" == "hiredis" ]; then
         pip install hiredis${{inputs.hiredis-version}}
        fi
        echo "::endgroup::"
        
        echo "::group::Starting Redis servers"
        redis_major_version=$(echo "$REDIS_VERSION" | grep -oP '^\d+')
        
        if (( redis_major_version < 8 )); then
          echo "Using redis-stack for module tests"
        
          # Mapping of redis version to stack version  
          declare -A redis_stack_version_mapping=(
            ["7.4.1"]="7.4.0-v1"
            ["7.2.6"]="7.2.0-v13"
            ["6.2.16"]="6.2.6-v17"
          )
                  
          if [[ -v redis_stack_version_mapping[$REDIS_VERSION] ]]; then
            export REDIS_STACK_IMAGE="redis/redis-stack-server:${redis_stack_version_mapping[$REDIS_VERSION]}"
            echo "REDIS_MOD_URL=redis://127.0.0.1:6479/0" >> $GITHUB_ENV
          else
            echo "Version not found in the mapping."
            exit 1
          fi
          invoke devenv --endpoints=all-stack
        else
          echo "Using redis CE for module tests"
          echo "REDIS_MOD_URL=redis://127.0.0.1:6379" >> $GITHUB_ENV
          invoke devenv --endpoints all
        fi        
        
        sleep 10 # time to settle
        echo "::endgroup::"
      shell: bash

    - name: Run RESP2 tests
      run: |
        run_tests() {
          local protocol=$1
          local eventloop=""
    
          if [ "${{inputs.event-loop}}" == "uvloop" ]; then
            eventloop="--uvloop"
          fi
    
          echo "::group::RESP${protocol} standalone tests"
          echo "REDIS_MOD_URL=${REDIS_MOD_URL}"
          invoke standalone-tests --redis-mod-url=${REDIS_MOD_URL} $eventloop --protocol=${protocol}
          echo "::endgroup::"
    
          if [ "$protocol" == "2" ] || [ "${{inputs.parser-backend}}" != 'hiredis' ]; then
            echo "::group::RESP${protocol} cluster tests"
            invoke cluster-tests $eventloop --protocol=${protocol}
            echo "::endgroup::"
          fi
        }
  
        run_tests 2
        run_tests 3
      shell: bash

    - name: Upload test results and profiling data
      uses: actions/upload-artifact@v4
      with:
        name: pytest-results-${{inputs.redis-version}}-${{inputs.parser-backend}}-${{inputs.python-version}}-${{inputs.event-loop}}
        path: |
          *-results.xml
          prof/**
          profile_output*
        if-no-files-found: error
        retention-days: 10

    - name: Upload codecov coverage
      uses: codecov/codecov-action@v4
      with:
        fail_ci_if_error: false
